/**
 * 
 */
package outputter.evaluation;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import outputter.ApplicationUtilities;

/**
 * @author Hong Cui
 * 
 * This calculates the precision and recall scores of EQs generated by CharaParser and Curators
 * The similarity btw two EQs is calculated using SimJ or NIC.
 *
 */
public class PrecisionRecall {
	Connection conn ;
	/**
	 * 
	 */
	public PrecisionRecall() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost/charaparsereval2013?user=biocreative&password=biocreative");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	@SuppressWarnings("resource")
	public void calculatePR(String tablename){
		Statement states = null;
		ResultSet stateids = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			states = conn.createStatement();
			String outtable = tablename+"_pr";
			states.execute("drop table if exists `"+outtable+"`");
			states.execute("create table `"+outtable+"` (character_number int(5), state_number int(5), precision_simj float(5,4), recall_simj float(5,4), precision_nic float(5,4), recall_nic float(5,4))");			
			
			stateids = states.executeQuery("SELECT DISTINCT character_number, state_number FROM `"+tablename+"` order by character_number, state_number");
			while(stateids.next()){
				int cnumber = stateids.getInt("character_number");
				int snumber = stateids.getInt("state_number");
				stmt = conn.prepareStatement("select count(distinct curator_1_EQ_number) from `"+tablename+"` where character_number =? and state_number=? ");
				stmt.setInt(1, cnumber);
				stmt.setInt(2,  snumber);
				rs = stmt.executeQuery();
				rs.next();
				int c1count = rs.getInt(1);
				stmt = conn.prepareStatement("select count(distinct curator_2_EQ_number) from `"+tablename+"` where character_number =? and state_number=? ");
				stmt.setInt(1, cnumber);
				stmt.setInt(2,  snumber);
				rs = stmt.executeQuery();
				rs.next();
				int c2count = rs.getInt(1);
			
				//computer sim for recall
				stmt = conn.prepareStatement("select curator_1_EQ_number, curator_2_EQ_number, simj_score, nic_score from `"+tablename+"` where character_number =? and state_number=? order by curator_1_EQ_number");
				stmt.setInt(1, cnumber);
				stmt.setInt(2,  snumber);
			
				rs = stmt.executeQuery();
				String pre_c1num = "";
				float sim_simj_r = 0f;
				float max_simj = 0f;
				float sim_nic_r = 0f;
				float max_nic = 0f;
				if(rs.next()){
					max_simj = rs.getFloat("simj_score");
					max_nic = rs.getFloat("nic_score");
					pre_c1num  = rs.getString("curator_1_EQ_number");
				}
				while(rs.next()){
					String c1num  = rs.getString("curator_1_EQ_number");
					if(c1num.compareTo(pre_c1num) != 0){
						sim_simj_r += max_simj;
						max_simj = rs.getFloat("simj_score");
						sim_nic_r += max_nic;
						max_nic = rs.getFloat("nic_score");
						pre_c1num = c1num;
					}else{
						float simj_score = rs.getFloat("simj_score");
						if(max_simj < simj_score) max_simj = simj_score;
						float nic_score = rs.getFloat("nic_score");
						if(max_nic < nic_score) max_nic = nic_score;
					}
				}
				sim_simj_r += max_simj; //last max
				sim_nic_r += max_nic;
				
				//computer sim for precision
				stmt = conn.prepareStatement("select curator_1_EQ_number, curator_2_EQ_number, simj_score, nic_score from `"+tablename+"` where character_number =? and state_number=? order by curator_2_EQ_number");
				stmt.setInt(1, cnumber);
				stmt.setInt(2,  snumber);
				rs = stmt.executeQuery();
				 pre_c1num = "";
				float sim_simj_p = 0f;
				max_simj = 0f;
				float sim_nic_p = 0f;
				max_nic = 0f;
				if(rs.next()){
					max_simj = rs.getFloat("simj_score");
					max_nic = rs.getFloat("nic_score");
					pre_c1num  = rs.getString("curator_2_EQ_number");
				}
				while(rs.next()){
					String c1num  = rs.getString("curator_2_EQ_number");
					if(c1num.compareTo(pre_c1num) != 0){
						sim_simj_p += max_simj;
						max_simj = rs.getFloat("simj_score");
						sim_nic_p += max_nic;
						max_nic = rs.getFloat("nic_score");
						pre_c1num = c1num;
					}else{
						float simj_score = rs.getFloat("simj_score");
						if(max_simj < simj_score) max_simj = simj_score;
						float nic_score = rs.getFloat("nic_score");
						if(max_nic < nic_score) max_nic = nic_score;
					}
				}
				sim_simj_p += max_simj; //last max
				sim_nic_p += max_nic;
				
				float precision_simj = sim_simj_p/c2count;
				float recall_simj = sim_simj_r/c1count;
				float precision_nic = sim_nic_p/c2count;
				float recall_nic = sim_nic_r/c1count;
				//save result
				stmt = conn.prepareStatement("insert into `"+outtable+"` ( character_number, state_number, precision_simj, recall_simj, precision_nic, recall_nic) values (?,?,?,?,?,?)");
				stmt.setInt(1, cnumber);
				stmt.setInt(2, snumber);
				stmt.setFloat(3, precision_simj);
				stmt.setFloat(4, recall_simj);
				stmt.setFloat(5, precision_nic);
				stmt.setFloat(6, recall_nic);
				stmt.execute();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(rs!=null){
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}			
			if(stmt!=null){
				try {
					stmt.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if(states!=null){
				try {
					states.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if(stateids!=null){
				try {
					stateids.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}		
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		ArrayList<String> tables = new ArrayList<String>();
		tables.add("pereq_kr--ad_40718--cp_40718");
		tables.add("pereq_kr--ad_40718--cp_best");
		tables.add("pereq_kr--ad_40718--cp2012_bioc");
		tables.add("pereq_kr--ad_40718--ni_40716");
		tables.add("pereq_kr--ni_40716--cp_40716");
		tables.add("pereq_kr--ni_40716--cp_best");
		tables.add("pereq_kr--ni_40716--cp2012_bioc");
		tables.add("pereq_kr--wd_40717--ad_40718");
		tables.add("pereq_kr--wd_40717--cp_40717");
		tables.add("pereq_kr--wd_40717--cp_best");
		tables.add("pereq_kr--wd_40717--cp2012_bioc");
		tables.add("pereq_kr--wd_40717--ni_40716");
		tables.add("pereq_nr--ad_40674--cp_40674");
		tables.add("pereq_nr--ad_40674--cp_best");
		tables.add("pereq_nr--ad_40674--cp2012_bioc");
		tables.add("pereq_nr--ad_40674--ni_40676");
		tables.add("pereq_nr--ni_40676--cp_40676");
		tables.add("pereq_nr--ni_40676--cp_best");
		tables.add("pereq_nr--ni_40676--cp2012_bioc");
		tables.add("pereq_nr--wd_38484--ad_40674");
		tables.add("pereq_nr--wd_38484--cp_38484");
		tables.add("pereq_nr--wd_38484--cp_best");
		tables.add("pereq_nr--wd_38484--cp2012_bioc");
		tables.add("pereq_nr--wd_38484--ni_40676");
		PrecisionRecall pr = new PrecisionRecall();
		for(String table: tables){
			System.out.println("processing table "+table);
			pr.calculatePR(table);
		}
	}

}
